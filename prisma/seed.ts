import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function main() {
  console.log('üå± Starting database seeding...')

  // Create sample projects
  const project1 = await prisma.project.create({
    data: {
      name: 'D·ª± √°n X√¢y d·ª±ng C·∫ßu V∆∞·ª£t ABC',
      description: 'D·ª± √°n x√¢y d·ª±ng c·∫ßu v∆∞·ª£t t·∫°i khu v·ª±c ABC v·ªõi t·ªïng chi·ªÅu d√†i 500m',
      manager: 'Nguy·ªÖn VƒÉn A',
      status: 'ACTIVE',
      startDate: new Date('2024-01-01'),
      endDate: new Date('2024-12-31'),
      budget: 50000000000, // 50 t·ª∑ VND
      location: 'Qu·∫≠n 1, TP.HCM'
    }
  })

  const project2 = await prisma.project.create({
    data: {
      name: 'D·ª± √°n Khu D√¢n C∆∞ XYZ',
      description: 'D·ª± √°n ph√°t tri·ªÉn khu d√¢n c∆∞ cao c·∫•p v·ªõi 200 cƒÉn h·ªô',
      manager: 'Tr·∫ßn Th·ªã B',
      status: 'ACTIVE',
      startDate: new Date('2024-02-01'),
      endDate: new Date('2025-06-30'),
      budget: 120000000000, // 120 t·ª∑ VND
      location: 'Qu·∫≠n 7, TP.HCM'
    }
  })

  console.log('‚úÖ Created projects:', { project1: project1.name, project2: project2.name })

  // Create constructions for project 1
  const construction1 = await prisma.construction.create({
    data: {
      projectId: project1.id,
      name: 'H·∫°ng m·ª•c M√≥ng c·∫ßu',
      description: 'Thi c√¥ng m√≥ng c·∫ßu v√† tr·ª• c·∫ßu ch√≠nh',
      location: 'V·ªã tr√≠ tr·ª• c·∫ßu ch√≠nh',
      manager: 'L√™ VƒÉn C',
      status: 'ACTIVE',
      startDate: new Date('2024-01-15'),
      endDate: new Date('2024-06-30'),
      progressPercentage: 65
    }
  })

  const construction2 = await prisma.construction.create({
    data: {
      projectId: project1.id,
      name: 'H·∫°ng m·ª•c D·∫ßm c·∫ßu',
      description: 'L·∫Øp ƒë·∫∑t d·∫ßm c·∫ßu v√† m·∫∑t c·∫ßu',
      location: 'To√†n b·ªô nh·ªãp c·∫ßu',
      manager: 'Ph·∫°m VƒÉn D',
      status: 'ACTIVE',
      startDate: new Date('2024-04-01'),
      endDate: new Date('2024-10-31'),
      progressPercentage: 30
    }
  })

  // Create constructions for project 2
  const construction3 = await prisma.construction.create({
    data: {
      projectId: project2.id,
      name: 'H·∫°ng m·ª•c H·∫° t·∫ßng k·ªπ thu·∫≠t',
      description: 'X√¢y d·ª±ng h·ªá th·ªëng ƒë∆∞·ªùng, ƒëi·ªán, n∆∞·ªõc',
      location: 'To√†n khu d√¢n c∆∞',
      manager: 'Ho√†ng Th·ªã E',
      status: 'ACTIVE',
      startDate: new Date('2024-02-15'),
      endDate: new Date('2024-08-31'),
      progressPercentage: 45
    }
  })

  console.log('‚úÖ Created constructions:', { 
    construction1: construction1.name, 
    construction2: construction2.name,
    construction3: construction3.name 
  })

  // Create categories for construction 1
  const category1 = await prisma.category.create({
    data: {
      constructionId: construction1.id,
      name: 'G√≥i th·∫ßu ƒê√†o ƒë·∫•t m√≥ng',
      description: 'Thi c√¥ng ƒë√†o ƒë·∫•t v√† chu·∫©n b·ªã m√≥ng',
      contractor: 'C√¥ng ty TNHH X√¢y d·ª±ng ABC',
      contractValue: 5000000000, // 5 t·ª∑ VND
      status: 'ACTIVE',
      startDate: new Date('2024-01-15'),
      endDate: new Date('2024-03-31')
    }
  })

  const category2 = await prisma.category.create({
    data: {
      constructionId: construction1.id,
      name: 'G√≥i th·∫ßu ƒê·ªï b√™ t√¥ng m√≥ng',
      description: 'Thi c√¥ng ƒë·ªï b√™ t√¥ng m√≥ng v√† tr·ª• c·∫ßu',
      contractor: 'C√¥ng ty CP B√™ t√¥ng XYZ',
      contractValue: 8000000000, // 8 t·ª∑ VND
      status: 'ACTIVE',
      startDate: new Date('2024-03-01'),
      endDate: new Date('2024-06-30')
    }
  })

  // Create categories for construction 2
  const category3 = await prisma.category.create({
    data: {
      constructionId: construction2.id,
      name: 'G√≥i th·∫ßu D·∫ßm b√™ t√¥ng',
      description: 'S·∫£n xu·∫•t v√† l·∫Øp ƒë·∫∑t d·∫ßm b√™ t√¥ng c·∫ßu',
      contractor: 'C√¥ng ty TNHH D·∫ßm c·∫ßu DEF',
      contractValue: 15000000000, // 15 t·ª∑ VND
      status: 'ACTIVE',
      startDate: new Date('2024-04-01'),
      endDate: new Date('2024-09-30')
    }
  })

  // Create categories for construction 3
  const category4 = await prisma.category.create({
    data: {
      constructionId: construction3.id,
      name: 'G√≥i th·∫ßu H·ªá th·ªëng ƒëi·ªán',
      description: 'L·∫Øp ƒë·∫∑t h·ªá th·ªëng ƒëi·ªán khu d√¢n c∆∞',
      contractor: 'C√¥ng ty CP ƒêi·ªán l·ª±c GHI',
      contractValue: 3000000000, // 3 t·ª∑ VND
      status: 'ACTIVE',
      startDate: new Date('2024-02-15'),
      endDate: new Date('2024-06-30')
    }
  })

  console.log('‚úÖ Created categories:', { 
    category1: category1.name, 
    category2: category2.name,
    category3: category3.name,
    category4: category4.name
  })

  // Create sample reports
  const report1 = await prisma.report.create({
    data: {
      categoryId: category1.id,
      name: 'Nh·∫≠t k√Ω thi c√¥ng ng√†y 15/01/2024',
      reportDate: new Date('2024-01-15'),
      weather: 'N·∫Øng, nhi·ªát ƒë·ªô 28¬∞C',
      temperature: '28¬∞C',
      status: 'COMPLETED',
      templateConfig: {
        initial_template_id: 'template_1',
        daily_template_id: 'template_2',
        initial_pages: 3,
        daily_pages: 2,
        total_daily_copies: 1
      },
      imageConfig: {
        template_page: 4,
        images_per_page: 6,
        total_images: 12,
        layout: {
          rows: 3,
          cols: 2,
          cell_width: 200,
          cell_height: 150,
          spacing: 10
        }
      }
    }
  })

  const report2 = await prisma.report.create({
    data: {
      categoryId: category1.id,
      name: 'Nh·∫≠t k√Ω thi c√¥ng ng√†y 16/01/2024',
      reportDate: new Date('2024-01-16'),
      weather: 'M∆∞a nh·ªè, nhi·ªát ƒë·ªô 25¬∞C',
      temperature: '25¬∞C',
      status: 'DRAFT',
      templateConfig: {
        initial_template_id: 'template_1',
        daily_template_id: 'template_2',
        initial_pages: 3,
        daily_pages: 2,
        total_daily_copies: 1
      },
      imageConfig: {
        template_page: 4,
        images_per_page: 8,
        total_images: 16,
        layout: {
          rows: 4,
          cols: 2,
          cell_width: 200,
          cell_height: 150,
          spacing: 10
        }
      }
    }
  })

  const report3 = await prisma.report.create({
    data: {
      categoryId: category2.id,
      name: 'Nh·∫≠t k√Ω ƒë·ªï b√™ t√¥ng m√≥ng M1',
      reportDate: new Date('2024-03-05'),
      weather: 'N·∫Øng r√°o, nhi·ªát ƒë·ªô 30¬∞C',
      temperature: '30¬∞C',
      status: 'COMPLETED',
      isShared: true,
      sharedType: 'MEMBERS',
      templateConfig: {
        initial_template_id: 'template_1',
        daily_template_id: 'template_2',
        initial_pages: 3,
        daily_pages: 2,
        total_daily_copies: 2
      },
      imageConfig: {
        template_page: 5,
        images_per_page: 4,
        total_images: 20,
        layout: {
          rows: 2,
          cols: 2,
          cell_width: 250,
          cell_height: 200,
          spacing: 15
        }
      }
    }
  })

  console.log('‚úÖ Created reports:', { 
    report1: report1.name, 
    report2: report2.name,
    report3: report3.name
  })

  // Create sample template files
  const template1 = await prisma.templateFile.create({
    data: {
      name: 'M·∫´u nh·∫≠t k√Ω ƒë·∫ßu - C∆° b·∫£n',
      fileUrl: '/templates/initial_basic.docx',
      fileType: 'INITIAL',
      pageCount: 3,
      fileSize: 1024000, // 1MB
      isDefault: true
    }
  })

  const template2 = await prisma.templateFile.create({
    data: {
      name: 'M·∫´u nh·∫≠t k√Ω th√™m - H√†ng ng√†y',
      fileUrl: '/templates/daily_standard.docx',
      fileType: 'DAILY',
      pageCount: 2,
      fileSize: 512000, // 512KB
      isDefault: true
    }
  })

  const template3 = await prisma.templateFile.create({
    data: {
      name: 'M·∫´u nh·∫≠t k√Ω ƒë·∫ßu - Chi ti·∫øt',
      fileUrl: '/templates/initial_detailed.docx',
      fileType: 'INITIAL',
      pageCount: 5,
      fileSize: 2048000, // 2MB
      isDefault: false
    }
  })

  console.log('‚úÖ Created template files:', { 
    template1: template1.name, 
    template2: template2.name,
    template3: template3.name
  })

  // Create sample users
  const user1 = await prisma.user.create({
    data: {
      username: 'admin',
      email: 'admin@example.com',
      passwordHash: '$2b$10$example.hash.here', // In real app, use proper bcrypt hash
      fullName: 'Qu·∫£n tr·ªã vi√™n h·ªá th·ªëng',
      role: 'ADMIN',
      isActive: true
    }
  })

  const user2 = await prisma.user.create({
    data: {
      username: 'manager1',
      email: 'manager1@example.com',
      passwordHash: '$2b$10$example.hash.here',
      fullName: 'Nguy·ªÖn VƒÉn A',
      role: 'MANAGER',
      isActive: true
    }
  })

  const user3 = await prisma.user.create({
    data: {
      username: 'editor1',
      email: 'editor1@example.com',
      passwordHash: '$2b$10$example.hash.here',
      fullName: 'Tr·∫ßn Th·ªã B',
      role: 'EDITOR',
      isActive: true
    }
  })

  console.log('‚úÖ Created users:', { 
    user1: user1.username, 
    user2: user2.username,
    user3: user3.username
  })

  // Create sample report pages
  await prisma.reportPage.createMany({
    data: [
      {
        reportId: report1.id,
        pageNumber: 1,
        pageType: 'TEMPLATE_INITIAL',
        content: { type: 'template', template_id: 'template_1', page: 1 },
        isLocked: false
      },
      {
        reportId: report1.id,
        pageNumber: 2,
        pageType: 'TEMPLATE_INITIAL',
        content: { type: 'template', template_id: 'template_1', page: 2 },
        isLocked: false
      },
      {
        reportId: report1.id,
        pageNumber: 3,
        pageType: 'TEMPLATE_INITIAL',
        content: { type: 'template', template_id: 'template_1', page: 3 },
        isLocked: false
      },
      {
        reportId: report1.id,
        pageNumber: 4,
        pageType: 'IMAGE_PAGE',
        content: { type: 'images', layout: { rows: 3, cols: 2 } },
        isLocked: false
      },
      {
        reportId: report1.id,
        pageNumber: 5,
        pageType: 'IMAGE_PAGE',
        content: { type: 'images', layout: { rows: 3, cols: 2 } },
        isLocked: false
      }
    ]
  })

  console.log('‚úÖ Created report pages for report1')

  // Create sample report permissions
  await prisma.reportPermission.createMany({
    data: [
      {
        reportId: report3.id,
        userId: user2.id,
        permissionType: 'ADMIN',
        grantedBy: user1.id
      },
      {
        reportId: report3.id,
        userId: user3.id,
        permissionType: 'EDIT',
        grantedBy: user1.id
      }
    ]
  })

  console.log('‚úÖ Created report permissions')

  // Create sample activity logs
  await prisma.activityLog.createMany({
    data: [
      {
        userId: user1.id,
        action: 'CREATE',
        resourceType: 'PROJECT',
        resourceId: project1.id,
        details: { name: project1.name },
        ipAddress: '192.168.1.100'
      },
      {
        userId: user2.id,
        action: 'CREATE',
        resourceType: 'REPORT',
        resourceId: report1.id,
        details: { name: report1.name, category: category1.name },
        ipAddress: '192.168.1.101'
      },
      {
        userId: user3.id,
        action: 'UPDATE',
        resourceType: 'REPORT',
        resourceId: report2.id,
        details: { field: 'status', old_value: 'DRAFT', new_value: 'COMPLETED' },
        ipAddress: '192.168.1.102'
      }
    ]
  })

  console.log('‚úÖ Created activity logs')

  console.log('üéâ Database seeding completed successfully!')
  console.log('\nüìä Summary:')
  console.log(`- Projects: 2`)
  console.log(`- Constructions: 3`)
  console.log(`- Categories: 4`)
  console.log(`- Reports: 3`)
  console.log(`- Template Files: 3`)
  console.log(`- Users: 3`)
  console.log(`- Report Pages: 5`)
  console.log(`- Report Permissions: 2`)
  console.log(`- Activity Logs: 3`)
}

main()
  .catch((e) => {
    console.error('‚ùå Error during seeding:', e)
    process.exit(1)
  })
  .finally(async () => {
    await prisma.$disconnect()
  })