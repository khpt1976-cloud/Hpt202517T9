"use client"
import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Textarea } from "@/components/ui/textarea"
import { Label } from "@/components/ui/label"
import { Plus, Edit, Eye, Home, Info, DollarSign } from "lucide-react"

export default function ContentManagementPage() {
  const [searchTerm, setSearchTerm] = useState("")
  const [activeSection, setActiveSection] = useState("homepage")

  const contentSections = {
    homepage: {
      title: "Trang ch·ªß",
      icon: Home,
      sections: [
        {
          id: "hero",
          name: "Hero Section",
          content: {
            title: "Gi·∫£i ph√°p qu·∫£n l√Ω x√¢y d·ª±ng to√†n di·ªán",
            subtitle: "N·ªÅn t·∫£ng s·ªë h√≥a ti√™n ti·∫øn cho ng√†nh x√¢y d·ª±ng Vi·ªát Nam",
            description:
              "ConstructVN cung c·∫•p gi·∫£i ph√°p qu·∫£n l√Ω d·ª± √°n x√¢y d·ª±ng t·ª´ A-Z v·ªõi c√¥ng ngh·ªá hi·ªán ƒë·∫°i, gi√∫p t·ªëi ∆∞u h√≥a quy tr√¨nh v√† n√¢ng cao hi·ªáu qu·∫£ c√¥ng vi·ªác.",
            ctaText: "B·∫Øt ƒë·∫ßu mi·ªÖn ph√≠",
            videoUrl: "https://example.com/demo-video",
          },
        },
        {
          id: "features",
          name: "T√≠nh nƒÉng ch√≠nh",
          content: {
            features: [
              {
                title: "Qu·∫£n l√Ω d·ª± √°n",
                description: "Theo d√µi ti·∫øn ƒë·ªô, ph√¢n c√¥ng nhi·ªám v·ª• v√† qu·∫£n l√Ω t√†i nguy√™n hi·ªáu qu·∫£",
                icon: "üìä",
              },
              {
                title: "Nh·∫≠t k√Ω x√¢y d·ª±ng",
                description: "Ghi ch√©p chi ti·∫øt qu√° tr√¨nh thi c√¥ng v·ªõi h√¨nh ·∫£nh v√† b√°o c√°o",
                icon: "üìù",
              },
              {
                title: "Qu·∫£n l√Ω nh√≥m",
                description: "Ph·ªëi h·ª£p l√†m vi·ªác nh√≥m v√† giao ti·∫øp hi·ªáu qu·∫£",
                icon: "üë•",
              },
            ],
          },
        },
        {
          id: "testimonials",
          name: "ƒê√°nh gi√° kh√°ch h√†ng",
          content: {
            testimonials: [
              {
                name: "Nguy·ªÖn VƒÉn A",
                company: "C√¥ng ty TNHH X√¢y d·ª±ng ABC",
                content: "ConstructVN ƒë√£ gi√∫p ch√∫ng t√¥i ti·∫øt ki·ªám 30% th·ªùi gian qu·∫£n l√Ω d·ª± √°n",
                rating: 5,
              },
              {
                name: "Tr·∫ßn Th·ªã B",
                company: "T·∫≠p ƒëo√†n X√¢y d·ª±ng XYZ",
                content: "Giao di·ªán th√¢n thi·ªán, d·ªÖ s·ª≠ d·ª•ng v√† h·ªó tr·ª£ kh√°ch h√†ng tuy·ªát v·ªùi",
                rating: 5,
              },
            ],
          },
        },
      ],
    },
    about: {
      title: "Gi·ªõi thi·ªáu",
      icon: Info,
      sections: [
        {
          id: "mission",
          name: "S·ª© m·ªánh & T·∫ßm nh√¨n",
          content: {
            mission: "S·ªë h√≥a ng√†nh x√¢y d·ª±ng Vi·ªát Nam v·ªõi c√¥ng ngh·ªá ti√™n ti·∫øn",
            vision: "Tr·ªü th√†nh n·ªÅn t·∫£ng qu·∫£n l√Ω x√¢y d·ª±ng h√†ng ƒë·∫ßu ƒê√¥ng Nam √Å",
          },
        },
        {
          id: "values",
          name: "Gi√° tr·ªã c·ªët l√µi",
          content: {
            values: [
              { title: "Ch·∫•t l∆∞·ª£ng", description: "Cam k·∫øt ch·∫•t l∆∞·ª£ng s·∫£n ph·∫©m v√† d·ªãch v·ª•" },
              { title: "Kh√°ch h√†ng", description: "ƒê·∫∑t kh√°ch h√†ng l√†m trung t√¢m" },
              { title: "ƒê·ªïi m·ªõi", description: "Kh√¥ng ng·ª´ng c·∫£i ti·∫øn v√† s√°ng t·∫°o" },
              { title: "Tin c·∫≠y", description: "X√¢y d·ª±ng l√≤ng tin v·ªõi kh√°ch h√†ng" },
            ],
          },
        },
      ],
    },
    pricing: {
      title: "B·∫£ng gi√°",
      icon: DollarSign,
      sections: [
        {
          id: "plans",
          name: "G√≥i d·ªãch v·ª•",
          content: {
            plans: [
              {
                name: "Free",
                price: 0,
                features: ["1 d·ª± √°n", "B√°o c√°o c∆° b·∫£n", "1GB l∆∞u tr·ªØ"],
              },
              {
                name: "Basic",
                price: 299000,
                features: ["5 d·ª± √°n", "B√°o c√°o chi ti·∫øt", "10GB l∆∞u tr·ªØ", "H·ªó tr·ª£ email"],
              },
              {
                name: "Professional",
                price: 599000,
                features: ["Kh√¥ng gi·ªõi h·∫°n d·ª± √°n", "B√°o c√°o cao c·∫•p", "100GB l∆∞u tr·ªØ", "H·ªó tr·ª£ 24/7"],
              },
              {
                name: "Enterprise",
                price: 1299000,
                features: ["T·∫•t c·∫£ t√≠nh nƒÉng Pro", "API t√πy ch·ªânh", "ƒê√†o t·∫°o chuy√™n s√¢u", "Qu·∫£n l√Ω ƒëa chi nh√°nh"],
              },
            ],
          },
        },
      ],
    },
  }

  const [editingContent, setEditingContent] = useState(null)
  const [editForm, setEditForm] = useState({})

  const handleEdit = (sectionId, contentId) => {
    const section = contentSections[activeSection]
    const content = section.sections.find((s) => s.id === contentId)
    setEditingContent(`${sectionId}-${contentId}`)
    setEditForm(content.content)
  }

  const handleSave = () => {
    // Here you would save to backend/database
    console.log("[v0] Saving content:", editForm)
    setEditingContent(null)
    setEditForm({})
  }

  const renderContentEditor = (content, type) => {
    switch (type) {
      case "hero":
        return (
          <div className="space-y-4">
            <div>
              <Label className="text-white">Ti√™u ƒë·ªÅ ch√≠nh</Label>
              <Input
                value={editForm.title || ""}
                onChange={(e) => setEditForm({ ...editForm, title: e.target.value })}
                className="bg-slate-700 border-slate-600 text-white"
              />
            </div>
            <div>
              <Label className="text-white">Ph·ª• ƒë·ªÅ</Label>
              <Input
                value={editForm.subtitle || ""}
                onChange={(e) => setEditForm({ ...editForm, subtitle: e.target.value })}
                className="bg-slate-700 border-slate-600 text-white"
              />
            </div>
            <div>
              <Label className="text-white">M√¥ t·∫£</Label>
              <Textarea
                value={editForm.description || ""}
                onChange={(e) => setEditForm({ ...editForm, description: e.target.value })}
                className="bg-slate-700 border-slate-600 text-white"
                rows={3}
              />
            </div>
            <div>
              <Label className="text-white">Text n√∫t CTA</Label>
              <Input
                value={editForm.ctaText || ""}
                onChange={(e) => setEditForm({ ...editForm, ctaText: e.target.value })}
                className="bg-slate-700 border-slate-600 text-white"
              />
            </div>
          </div>
        )
      default:
        return (
          <div>
            <Label className="text-white">N·ªôi dung JSON</Label>
            <Textarea
              value={JSON.stringify(editForm, null, 2)}
              onChange={(e) => {
                try {
                  setEditForm(JSON.parse(e.target.value))
                } catch (err) {
                  // Invalid JSON, ignore
                }
              }}
              className="bg-slate-700 border-slate-600 text-white font-mono"
              rows={10}
            />
          </div>
        )
    }
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-white">Qu·∫£n l√Ω n·ªôi dung</h1>
          <p className="text-slate-400 mt-1">Qu·∫£n l√Ω n·ªôi dung website theo t·ª´ng trang</p>
        </div>
        <Button className="bg-orange-500 hover:bg-orange-600">
          <Plus className="h-4 w-4 mr-2" />
          Th√™m n·ªôi dung
        </Button>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <Card className="bg-slate-800 border-slate-700">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium text-slate-400">T·ªïng sections</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-white">
              {Object.values(contentSections).reduce((acc, section) => acc + section.sections.length, 0)}
            </div>
            <p className="text-xs text-slate-400">Tr√™n {Object.keys(contentSections).length} trang</p>
          </CardContent>
        </Card>
        <Card className="bg-slate-800 border-slate-700">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium text-slate-400">ƒê√£ c·∫≠p nh·∫≠t</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-400">18</div>
            <p className="text-xs text-slate-400">H√¥m nay</p>
          </CardContent>
        </Card>
        <Card className="bg-slate-800 border-slate-700">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium text-slate-400">C·∫ßn xem l·∫°i</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-yellow-400">4</div>
            <p className="text-xs text-slate-400">Sections</p>
          </CardContent>
        </Card>
        <Card className="bg-slate-800 border-slate-700">
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium text-slate-400">L∆∞·ª£t xem</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-blue-400">12.5K</div>
            <p className="text-xs text-slate-400">+15% tu·∫ßn n√†y</p>
          </CardContent>
        </Card>
      </div>

      {/* Content Management Tabs */}
      <Tabs value={activeSection} onValueChange={setActiveSection}>
        <TabsList className="bg-slate-800 border-slate-700">
          {Object.entries(contentSections).map(([key, section]) => {
            const IconComponent = section.icon
            return (
              <TabsTrigger key={key} value={key} className="data-[state=active]:bg-orange-500">
                <IconComponent className="h-4 w-4 mr-2" />
                {section.title}
              </TabsTrigger>
            )
          })}
        </TabsList>

        {Object.entries(contentSections).map(([sectionKey, section]) => (
          <TabsContent key={sectionKey} value={sectionKey}>
            <Card className="bg-slate-800 border-slate-700">
              <CardHeader>
                <CardTitle className="text-white flex items-center">
                  <section.icon className="h-5 w-5 mr-2" />
                  {section.title}
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-6">
                  {section.sections.map((contentSection) => (
                    <div key={contentSection.id} className="bg-slate-700 rounded-lg p-4">
                      <div className="flex items-center justify-between mb-4">
                        <h3 className="text-lg font-medium text-white">{contentSection.name}</h3>
                        <div className="flex space-x-2">
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => handleEdit(sectionKey, contentSection.id)}
                            className="text-slate-400 hover:text-white"
                          >
                            <Edit className="h-4 w-4" />
                          </Button>
                          <Button variant="ghost" size="sm" className="text-slate-400 hover:text-white">
                            <Eye className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>

                      {editingContent === `${sectionKey}-${contentSection.id}` ? (
                        <div className="space-y-4">
                          {renderContentEditor(contentSection.content, contentSection.id)}
                          <div className="flex space-x-2">
                            <Button onClick={handleSave} className="bg-green-500 hover:bg-green-600">
                              L∆∞u
                            </Button>
                            <Button
                              variant="outline"
                              onClick={() => setEditingContent(null)}
                              className="border-slate-600 text-black font-semibold hover:text-black bg-white"
                            >
                              H·ªßy
                            </Button>
                          </div>
                        </div>
                      ) : (
                        <div className="text-slate-300">
                          <pre className="text-sm bg-slate-800 p-3 rounded overflow-auto">
                            {JSON.stringify(contentSection.content, null, 2)}
                          </pre>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        ))}
      </Tabs>
    </div>
  )
}
