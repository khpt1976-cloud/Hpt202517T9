"use client"
import { useState, useEffect } from "react"
import type React from "react"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import {
  Save,
  Eye,
  Upload,
  Play,
  Plus,
  Trash2,
  FileText,
  Package,
  Users,
  Building2Icon as BuildingOffice,
  LucideConstruction as BuildingConstruction,
  Bolt,
  Headphones,
} from "lucide-react"

export default function HomepageContentPage() {
  const [content, setContent] = useState({
    hero: {
      title: "Gi·∫£i ph√°p Qu·∫£n l√Ω X√¢y d·ª±ng Th√¥ng minh",
      subtitle: "N·ªÅn t·∫£ng to√†n di·ªán cho qu·∫£n l√Ω d·ª± √°n x√¢y d·ª±ng, b√°o c√°o ti·∫øn ƒë·ªô v√† h·ª£p t√°c nh√≥m hi·ªáu qu·∫£",
      ctaText: "B·∫Øt ƒë·∫ßu mi·ªÖn ph√≠",
      ctaSecondary: "Xem demo",
      videoUrl: "",
      videoTitle: "Video gi·ªõi thi·ªáu h·ªá th·ªëng",
      videoDescription: "T√¨m hi·ªÉu c√°ch s·ª≠ d·ª•ng h·ªá th·ªëng qu·∫£n l√Ω thi c√¥ng",
    },
    features: {
      title: "T√≠nh nƒÉng n·ªïi b·∫≠t",
      subtitle: "H·ªá th·ªëng qu·∫£n l√Ω d·ª± √°n x√¢y d·ª±ng to√†n di·ªán v·ªõi c√°c c√¥ng c·ª• chuy√™n nghi·ªáp",
      items: [
        {
          title: "Qu·∫£n l√Ω D·ª± √°n",
          description:
            "T·∫°o v√† qu·∫£n l√Ω nhi·ªÅu d·ª± √°n x√¢y d·ª±ng, ph√¢n chia c√¥ng vi·ªác v√† theo d√µi ti·∫øn ƒë·ªô m·ªôt c√°ch khoa h·ªçc.",
          icon: "FileText",
          link: "#",
        },
        {
          title: "Nh·∫≠t k√Ω Thi c√¥ng",
          description: "T·∫°o b√°o c√°o nh·∫≠t k√Ω thi c√¥ng theo m·∫´u chu·∫©n Vi·ªát Nam v·ªõi t√≠nh nƒÉng t·ª± ƒë·ªông h√≥a th√¥ng minh.",
          icon: "Package",
          link: "#",
        },
        {
          title: "Qu·∫£n l√Ω Nh√≥m",
          description: "Ph√¢n quy·ªÅn ng∆∞·ªùi d√πng theo vai tr√≤ Admin, Manager, User v·ªõi c√°c ch·ª©c nƒÉng ph√π h·ª£p.",
          icon: "Users",
          link: "#",
        },
      ],
    },
    whyChooseUs: {
      title: "T·∫°i sao ch·ªçn ch√∫ng t√¥i",
      subtitle: "Nh·ªØng l√Ω do khi·∫øn h√†ng ngh√¨n doanh nghi·ªáp tin t∆∞·ªüng s·ª≠ d·ª•ng h·ªá th·ªëng c·ªßa ch√∫ng t√¥i",
      stats: [
        { number: "1000+", label: "Doanh nghi·ªáp x√¢y d·ª±ng", icon: "üè¢" },
        { number: "50K+", label: "D·ª± √°n ho√†n th√†nh", icon: "üèóÔ∏è" },
        { number: "99.9%", label: "Th·ªùi gian ho·∫°t ƒë·ªông", icon: "‚ö°" },
        { number: "24/7", label: "H·ªó tr·ª£ kh√°ch h√†ng", icon: "üéß" },
      ],
    },
    aboutUs: {
      title: "V·ªÅ ch√∫ng t√¥i",
      subtitle: "ƒê·ªôi ng≈© chuy√™n gia v·ªõi nhi·ªÅu nƒÉm kinh nghi·ªám trong lƒ©nh v·ª±c x√¢y d·ª±ng v√† c√¥ng ngh·ªá",
      description:
        "ConstructVN ƒë∆∞·ª£c th√†nh l·∫≠p v·ªõi s·ª© m·ªánh s·ªë h√≥a ng√†nh x√¢y d·ª±ng Vi·ªát Nam, mang ƒë·∫øn nh·ªØng gi·∫£i ph√°p c√¥ng ngh·ªá ti√™n ti·∫øn nh·∫•t.",
      // image: "/construction-team.png",
    },
    services: {
      title: "D·ªãch v·ª•",
      subtitle: "C√°c g√≥i d·ªãch v·ª• ph√π h·ª£p v·ªõi m·ªçi quy m√¥ doanh nghi·ªáp",
      items: [
        {
          name: "G√≥i C∆° b·∫£n",
          price: "299,000ƒë/th√°ng",
          features: ["5 d·ª± √°n", "B√°o c√°o c∆° b·∫£n", "H·ªó tr·ª£ email"],
          popular: false,
        },
        {
          name: "G√≥i Chuy√™n nghi·ªáp",
          price: "599,000ƒë/th√°ng",
          features: ["20 d·ª± √°n", "B√°o c√°o n√¢ng cao", "H·ªó tr·ª£ 24/7", "API t√≠ch h·ª£p"],
          popular: true,
        },
        {
          name: "G√≥i Doanh nghi·ªáp",
          price: "Li√™n h·ªá",
          features: ["Kh√¥ng gi·ªõi h·∫°n d·ª± √°n", "T√πy ch·ªânh theo y√™u c·∫ßu", "ƒê√†o t·∫°o chuy√™n s√¢u"],
          popular: false,
        },
      ],
    },
    contact: {
      title: "Li√™n h·ªá",
      subtitle: "H√£y ƒë·ªÉ l·∫°i th√¥ng tin, ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n trong th·ªùi gian s·ªõm nh·∫•t",
      phone: "1900 1234",
      email: "contact@constructvn.com",
      address: "123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM",
    },
    pricing: {
      title: "B·∫£ng gi√°",
      subtitle: "Ch·ªçn g√≥i ph√π h·ª£p v·ªõi nhu c·∫ßu c·ªßa b·∫°n",
    },
    testimonials: {
      title: "Kh√°ch h√†ng n√≥i g√¨ v·ªÅ ch√∫ng t√¥i",
      subtitle: "Nh·ªØng ph·∫£n h·ªìi t√≠ch c·ª±c t·ª´ kh√°ch h√†ng ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•",
      items: [
        {
          name: "Nguy·ªÖn VƒÉn A",
          position: "Gi√°m ƒë·ªëc d·ª± √°n",
          company: "C√¥ng ty TNHH ABC",
          content: "H·ªá th·ªëng gi√∫p ch√∫ng t√¥i qu·∫£n l√Ω d·ª± √°n hi·ªáu qu·∫£ h∆°n r·∫•t nhi·ªÅu. Giao di·ªán th√¢n thi·ªán v√† d·ªÖ s·ª≠ d·ª•ng.",
          rating: 5,
        },
        {
          name: "Tr·∫ßn Th·ªã B",
          position: "K·ªπ s∆∞ x√¢y d·ª±ng",
          company: "T·∫≠p ƒëo√†n XYZ",
          content: "T√≠nh nƒÉng b√°o c√°o t·ª± ƒë·ªông gi√∫p ti·∫øt ki·ªám r·∫•t nhi·ªÅu th·ªùi gian. R·∫•t h√†i l√≤ng v·ªõi d·ªãch v·ª•.",
          rating: 5,
        },
      ],
    },
    faq: {
      title: "C√¢u h·ªèi th∆∞·ªùng g·∫∑p",
      subtitle: "Nh·ªØng th·∫Øc m·∫Øc ph·ªï bi·∫øn v·ªÅ h·ªá th·ªëng v√† d·ªãch v·ª•",
      items: [
        {
          question: "H·ªá th·ªëng c√≥ h·ªó tr·ª£ ti·∫øng Vi·ªát kh√¥ng?",
          answer: "C√≥, h·ªá th·ªëng ƒë∆∞·ª£c thi·∫øt k·∫ø ho√†n to√†n b·∫±ng ti·∫øng Vi·ªát v√† tu√¢n th·ªß c√°c quy ƒë·ªãnh c·ªßa Vi·ªát Nam.",
        },
        {
          question: "C√≥ th·ªÉ d√πng th·ª≠ mi·ªÖn ph√≠ kh√¥ng?",
          answer: "C√≥, ch√∫ng t√¥i cung c·∫•p g√≥i d√πng th·ª≠ mi·ªÖn ph√≠ 14 ng√†y v·ªõi ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng.",
        },
        {
          question: "D·ªØ li·ªáu c√≥ ƒë∆∞·ª£c b·∫£o m·∫≠t kh√¥ng?",
          answer: "T·∫•t c·∫£ d·ªØ li·ªáu ƒë∆∞·ª£c m√£ h√≥a v√† l∆∞u tr·ªØ tr√™n server t·∫°i Vi·ªát Nam, tu√¢n th·ªß lu·∫≠t b·∫£o v·ªá d·ªØ li·ªáu.",
        },
      ],
    },
    cta: {
      title: "S·∫µn s√†ng b·∫Øt ƒë·∫ßu?",
      subtitle: "Tham gia c√πng h√†ng ngh√¨n doanh nghi·ªáp ƒë√£ tin t∆∞·ªüng s·ª≠ d·ª•ng ConstructVN",
      placeholder: "B·∫Øt ƒë·∫ßu mi·ªÖn ph√≠ ngay",
      button: "ƒêƒÉng k√Ω"
    },
    newsletter: {
      title: "ƒêƒÉng k√Ω nh·∫≠n tin t·ª©c",
      subtitle: "Nh·∫≠n th√¥ng tin m·ªõi nh·∫•t v·ªÅ s·∫£n ph·∫©m v√† ng√†nh x√¢y d·ª±ng",
      placeholder: "Nh·∫≠p email c·ªßa b·∫°n",
      buttonText: "ƒêƒÉng k√Ω",
    },
    footer: {
      companyName: "ConstructVN",
      description: "Gi·∫£i ph√°p qu·∫£n l√Ω x√¢y d·ª±ng th√¥ng minh h√†ng ƒë·∫ßu Vi·ªát Nam",
      address: "123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM",
      phone: "1900 1234",
      email: "contact@constructvn.com",
      socialLinks: {
        facebook: "https://facebook.com/constructvn",
        linkedin: "https://linkedin.com/company/constructvn",
        youtube: "https://youtube.com/constructvn",
      },
      quickLinks: [
        { name: "V·ªÅ ch√∫ng t√¥i", url: "/about" },
        { name: "D·ªãch v·ª•", url: "/services" },
        { name: "Li√™n h·ªá", url: "/contact" },
        { name: "H·ªó tr·ª£", url: "/support" },
      ],
      legalLinks: [
        { name: "ƒêi·ªÅu kho·∫£n s·ª≠ d·ª•ng", url: "/terms" },
        { name: "Ch√≠nh s√°ch b·∫£o m·∫≠t", url: "/privacy" },
        { name: "Ch√≠nh s√°ch cookie", url: "/cookies" },
      ],
      copyright: "¬© 2024 ConstructVN. T·∫•t c·∫£ quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.",
    },
  })


  useEffect(() => {
    if (typeof window === 'undefined') return
    const hash = window.location.hash
    if (hash) {
      // slight delay to ensure DOM is ready
      setTimeout(() => {
        const el = document.querySelector(hash)
        if (el) el.scrollIntoView({ behavior: 'smooth', block: 'start' })
      }, 50)
    }
  }, [])

  const getIconComponent = (iconName: string) => {
    const icons = {
      FileText: FileText,
      Package: Package,
      Users: Users,
      BuildingOffice: BuildingOffice,
      BuildingConstruction: BuildingConstruction,
      Bolt: Bolt,
      Headphones: Headphones,
    }
    const IconComponent = icons[iconName as keyof typeof icons] || FileText
    return <IconComponent className="h-6 w-6" />
  }

  const addFeatureItem = () => {
    const newItem = {
      title: "T√≠nh nƒÉng m·ªõi",
      description: "M√¥ t·∫£ t√≠nh nƒÉng m·ªõi",
      icon: "FileText",
      link: "#",
    }
    setContent({
      ...content,
      features: {
        ...content.features,
        items: [...content.features.items, newItem],
      },
    })
  }

  const removeFeatureItem = (index: number) => {
    const newItems = content.features.items.filter((_, i) => i !== index)
    setContent({
      ...content,
      features: {
        ...content.features,
        items: newItems,
      },
    })
  }

  const handleSave = () => {
    localStorage.setItem("homepage_content", JSON.stringify(content))
    window.dispatchEvent(new CustomEvent("homepage-content-updated", { detail: content }))
    console.log("Saving homepage content:", content)
  }

  const handleVideoUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (file) {
      const videoUrl = URL.createObjectURL(file)
      setContent({ ...content, hero: { ...content.hero, videoUrl } })
    }
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-2xl font-bold text-white">Qu·∫£n l√Ω n·ªôi dung - Trang ch·ªß</h1>
          <p className="text-slate-400">Ch·ªânh s·ª≠a n·ªôi dung trang ch·ªß website</p>
        </div>
        <div className="flex space-x-2">
          <Button variant="outline" className="border-slate-600 text-slate-300 hover:bg-slate-800 bg-transparent">
            <Eye className="h-4 w-4 mr-2" />
            Xem tr∆∞·ªõc
          </Button>
          <Button onClick={handleSave} className="bg-orange-500 hover:bg-orange-600">
            <Save className="h-4 w-4 mr-2" />
            L∆∞u thay ƒë·ªïi
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Hero Section */}
        <Card className="bg-slate-800 border-slate-700 lg:col-span-2">
          <CardHeader>
            <CardTitle className="text-white">Ph·∫ßn Gi·ªõi thi·ªáu Ch√≠nh (Hero Section)</CardTitle>
            <CardDescription className="text-slate-400">
              Qu·∫£n l√Ω n·ªôi dung v√† video ph·∫ßn banner ch√≠nh c·ªßa trang ch·ªß
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Text Content */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold text-white mb-4">N·ªôi dung vƒÉn b·∫£n</h3>
                <div>
                  <Label htmlFor="hero-title" className="text-slate-300">
                    Ti√™u ƒë·ªÅ ch√≠nh
                  </Label>
                  <Textarea
                    id="hero-title"
                    value={content.hero.title}
                    onChange={(e) => setContent({ ...content, hero: { ...content.hero, title: e.target.value } })}
                    className="bg-slate-700 border-slate-600 text-white"
                    rows={2}
                  />
                </div>
                <div>
                  <Label htmlFor="hero-subtitle" className="text-slate-300">
                    M√¥ t·∫£ chi ti·∫øt
                  </Label>
                  <Textarea
                    id="hero-subtitle"
                    value={content.hero.subtitle}
                    onChange={(e) => setContent({ ...content, hero: { ...content.hero, subtitle: e.target.value } })}
                    className="bg-slate-700 border-slate-600 text-white"
                    rows={3}
                  />
                </div>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="hero-cta" className="text-slate-300">
                      N√∫t ch√≠nh
                    </Label>
                    <Input
                      id="hero-cta"
                      value={content.hero.ctaText}
                      onChange={(e) => setContent({ ...content, hero: { ...content.hero, ctaText: e.target.value } })}
                      className="bg-slate-700 border-slate-600 text-white"
                    />
                  </div>
                  <div>
                    <Label htmlFor="hero-cta-secondary" className="text-slate-300">
                      N√∫t ph·ª•
                    </Label>
                    <Input
                      id="hero-cta-secondary"
                      value={content.hero.ctaSecondary}
                      onChange={(e) =>
                        setContent({ ...content, hero: { ...content.hero, ctaSecondary: e.target.value } })
                      }
                      className="bg-slate-700 border-slate-600 text-white"
                    />
                  </div>
                </div>
              </div>

              {/* Video Content */}
              <div className="space-y-4">
                <h3 className="text-lg font-semibold text-white mb-4">Qu·∫£n l√Ω Video</h3>
                <div>
                  <Label htmlFor="video-title" className="text-slate-300">
                    Ti√™u ƒë·ªÅ video
                  </Label>
                  <Input
                    id="video-title"
                    value={content.hero.videoTitle}
                    onChange={(e) => setContent({ ...content, hero: { ...content.hero, videoTitle: e.target.value } })}
                    className="bg-slate-700 border-slate-600 text-white"
                  />
                </div>
                <div>
                  <Label htmlFor="video-description" className="text-slate-300">
                    M√¥ t·∫£ video
                  </Label>
                  <Input
                    id="video-description"
                    value={content.hero.videoDescription}
                    onChange={(e) =>
                      setContent({ ...content, hero: { ...content.hero, videoDescription: e.target.value } })
                    }
                    className="bg-slate-700 border-slate-600 text-white"
                  />
                </div>
                <div>
                  <Label htmlFor="video-url" className="text-slate-300">
                    URL Video (YouTube, Vimeo, ho·∫∑c link tr·ª±c ti·∫øp)
                  </Label>
                  <Input
                    id="video-url"
                    value={content.hero.videoUrl}
                    onChange={(e) => setContent({ ...content, hero: { ...content.hero, videoUrl: e.target.value } })}
                    className="bg-slate-700 border-slate-600 text-white"
                    placeholder="https://www.youtube.com/watch?v=..."
                  />
                </div>
                <div>
                  <Label className="text-slate-300">Ho·∫∑c t·∫£i video l√™n</Label>
                  <div className="mt-2">
                    <input
                      type="file"
                      accept="video/*"
                      onChange={handleVideoUpload}
                      className="hidden"
                      id="video-upload"
                    />
                    <Button
                      type="button"
                      variant="outline"
                      className="border-slate-600 text-slate-300 hover:bg-slate-700 bg-transparent w-full"
                      onClick={() => document.getElementById("video-upload")?.click()}
                    >
                      <Upload className="h-4 w-4 mr-2" />
                      T·∫£i video l√™n
                    </Button>
                  </div>
                </div>
                {content.hero.videoUrl && (
                  <div className="p-4 bg-slate-700 rounded-lg">
                    <div className="flex items-center space-x-2 text-green-400">
                      <Play className="h-4 w-4" />
                      <span className="text-sm">Video ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p</span>
                    </div>
                    <p className="text-xs text-slate-400 mt-1 truncate">{content.hero.videoUrl}</p>
                  </div>
                )}
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Features Section */}
        <Card className="bg-slate-800 border-slate-700 lg:col-span-2">
          <CardHeader>
            <CardTitle className="text-white">T√≠nh nƒÉng n·ªïi b·∫≠t</CardTitle>
            <CardDescription className="text-slate-400">
              Qu·∫£n l√Ω c√°c t√≠nh nƒÉng ch√≠nh ƒë∆∞·ª£c hi·ªÉn th·ªã tr√™n trang ch·ªß
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            {/* Title and Subtitle Management */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="features-title" className="text-slate-300">
                  Ti√™u ƒë·ªÅ ch√≠nh
                </Label>
                <Input
                  id="features-title"
                  value={content.features.title}
                  onChange={(e) => setContent({ ...content, features: { ...content.features, title: e.target.value } })}
                  className="bg-slate-700 border-slate-600 text-white"
                />
              </div>
              <div>
                <Label htmlFor="features-subtitle" className="text-slate-300">
                  M√¥ t·∫£ ph·ª•
                </Label>
                <Input
                  id="features-subtitle"
                  value={content.features.subtitle}
                  onChange={(e) =>
                    setContent({ ...content, features: { ...content.features, subtitle: e.target.value } })
                  }
                  className="bg-slate-700 border-slate-600 text-white"
                />
              </div>
            </div>

            {/* Enhanced Feature Items Management */}
            <div className="space-y-4">
              <div className="flex items-center justify-between">
                <h3 className="text-lg font-semibold text-white">Danh s√°ch t√≠nh nƒÉng</h3>
                <Button onClick={addFeatureItem} size="sm" className="bg-orange-500 hover:bg-orange-600">
                  <Plus className="h-4 w-4 mr-2" />
                  Th√™m t√≠nh nƒÉng
                </Button>
              </div>

              {content.features.items.map((item, index) => (
                <div key={index} className="space-y-4 p-4 bg-slate-700 rounded-lg border border-slate-600">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-2">
                      {getIconComponent(item.icon)}
                      <span className="text-white font-medium">T√≠nh nƒÉng {index + 1}</span>
                    </div>
                    <Button
                      onClick={() => removeFeatureItem(index)}
                      size="sm"
                      variant="outline"
                      className="border-red-600 text-red-400 hover:bg-red-600 hover:text-white"
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </div>

                  <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
                    <div>
                      <Label className="text-slate-300">T√™n t√≠nh nƒÉng</Label>
                      <Input
                        value={item.title}
                        onChange={(e) => {
                          const newItems = [...content.features.items]
                          newItems[index].title = e.target.value
                          setContent({ ...content, features: { ...content.features, items: newItems } })
                        }}
                        className="bg-slate-600 border-slate-500 text-white"
                      />
                    </div>
                    <div>
                      <Label className="text-slate-300">Icon</Label>
                      <select
                        value={item.icon}
                        onChange={(e) => {
                          const newItems = [...content.features.items]
                          newItems[index].icon = e.target.value
                          setContent({ ...content, features: { ...content.features, items: newItems } })
                        }}
                        className="w-full bg-slate-600 border border-slate-500 text-white rounded-md px-3 py-2"
                      >
                        <option value="FileText">T√†i li·ªáu (FileText)</option>
                        <option value="Package">G√≥i (Package)</option>
                        <option value="Users">Ng∆∞·ªùi d√πng (Users)</option>
                      </select>
                    </div>
                  </div>

                  <div>
                    <Label className="text-slate-300">M√¥ t·∫£ chi ti·∫øt</Label>
                    <Textarea
                      value={item.description}
                      onChange={(e) => {
                        const newItems = [...content.features.items]
                        newItems[index].description = e.target.value
                        setContent({ ...content, features: { ...content.features, items: newItems } })
                      }}
                      className="bg-slate-600 border-slate-500 text-white"
                      rows={3}
                    />
                  </div>

                  <div>
                    <Label className="text-slate-300">Link "T√¨m hi·ªÉu th√™m"</Label>
                    <Input
                      value={item.link}
                      onChange={(e) => {
                        const newItems = [...content.features.items]
                        newItems[index].link = e.target.value
                        setContent({ ...content, features: { ...content.features, items: newItems } })
                      }}
                      className="bg-slate-600 border-slate-500 text-white"
                      placeholder="#"
                    />
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Why Choose Us Section */}
        <Card className="bg-slate-800 border-slate-700 lg:col-span-2">
          <CardHeader>
            <CardTitle className="text-white">T·∫°i sao ch·ªçn ch√∫ng t√¥i</CardTitle>
            <CardDescription className="text-slate-400">
              Qu·∫£n l√Ω th·ªëng k√™ v√† l√Ω do kh√°ch h√†ng ch·ªçn d·ªãch v·ª•
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="why-title" className="text-slate-300">
                  Ti√™u ƒë·ªÅ ch√≠nh
                </Label>
                <Input
                  id="why-title"
                  value={content.whyChooseUs.title}
                  onChange={(e) =>
                    setContent({ ...content, whyChooseUs: { ...content.whyChooseUs, title: e.target.value } })
                  }
                  className="bg-slate-700 border-slate-600 text-white"
                />
              </div>
              <div>
                <Label htmlFor="why-subtitle" className="text-slate-300">
                  M√¥ t·∫£ ph·ª•
                </Label>
                <Input
                  id="why-subtitle"
                  value={content.whyChooseUs.subtitle}
                  onChange={(e) =>
                    setContent({ ...content, whyChooseUs: { ...content.whyChooseUs, subtitle: e.target.value } })
                  }
                  className="bg-slate-700 border-slate-600 text-white"
                />
              </div>
            </div>

            <div className="space-y-4">
              <h3 className="text-lg font-semibold text-white">Th·ªëng k√™</h3>
              {content.whyChooseUs.stats.map((stat, index) => (
                <div key={index} className="grid grid-cols-4 gap-4 p-4 bg-slate-700 rounded-lg">
                  <div>
                    <Label className="text-slate-300">Icon</Label>
                    <Input
                      value={stat.icon}
                      onChange={(e) => {
                        const newStats = [...content.whyChooseUs.stats]
                        newStats[index].icon = e.target.value
                        setContent({ ...content, whyChooseUs: { ...content.whyChooseUs, stats: newStats } })
                      }}
                      className="bg-slate-600 border-slate-500 text-white"
                    />
                  </div>
                  <div>
                    <Label className="text-slate-300">S·ªë li·ªáu</Label>
                    <Input
                      value={stat.number}
                      onChange={(e) => {
                        const newStats = [...content.whyChooseUs.stats]
                        newStats[index].number = e.target.value
                        setContent({ ...content, whyChooseUs: { ...content.whyChooseUs, stats: newStats } })
                      }}
                      className="bg-slate-600 border-slate-500 text-white"
                    />
                  </div>
                  <div className="col-span-2">
                    <Label className="text-slate-300">M√¥ t·∫£</Label>
                    <Input
                      value={stat.label}
                      onChange={(e) => {
                        const newStats = [...content.whyChooseUs.stats]
                        newStats[index].label = e.target.value
                        setContent({ ...content, whyChooseUs: { ...content.whyChooseUs, stats: newStats } })
                      }}
                      className="bg-slate-600 border-slate-500 text-white"
                    />
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* About Us Section */}
        <Card className="bg-slate-800 border-slate-700">
          <CardHeader>
            <CardTitle className="text-white">V·ªÅ ch√∫ng t√¥i</CardTitle>
            <CardDescription className="text-slate-400">Th√¥ng tin gi·ªõi thi·ªáu v·ªÅ c√¥ng ty</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="about-title" className="text-slate-300">
                Ti√™u ƒë·ªÅ
              </Label>
              <Input
                id="about-title"
                value={content.aboutUs.title}
                onChange={(e) => setContent({ ...content, aboutUs: { ...content.aboutUs, title: e.target.value } })}
                className="bg-slate-700 border-slate-600 text-white"
              />
            </div>
            <div>
              <Label htmlFor="about-subtitle" className="text-slate-300">
                M√¥ t·∫£ ng·∫Øn
              </Label>
              <Input
                id="about-subtitle"
                value={content.aboutUs.subtitle}
                onChange={(e) => setContent({ ...content, aboutUs: { ...content.aboutUs, subtitle: e.target.value } })}
                className="bg-slate-700 border-slate-600 text-white"
              />
            </div>
            <div>
              <Label htmlFor="about-description" className="text-slate-300">
                M√¥ t·∫£ chi ti·∫øt
              </Label>
              <Textarea
                id="about-description"
                value={content.aboutUs.description}
                onChange={(e) =>
                  setContent({ ...content, aboutUs: { ...content.aboutUs, description: e.target.value } })
                }
                className="bg-slate-700 border-slate-600 text-white"
                rows={3}
              />
            </div>
          </CardContent>
        </Card>

        {/* Services Section */}
        <Card className="bg-slate-800 border-slate-700">
          <CardHeader>
            <CardTitle className="text-white">D·ªãch v·ª•</CardTitle>
            <CardDescription className="text-slate-400">Qu·∫£n l√Ω c√°c g√≥i d·ªãch v·ª•</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="services-title" className="text-slate-300">
                Ti√™u ƒë·ªÅ
              </Label>
              <Input
                id="services-title"
                value={content.services.title}
                onChange={(e) => setContent({ ...content, services: { ...content.services, title: e.target.value } })}
                className="bg-slate-700 border-slate-600 text-white"
              />
            </div>
            <div>
              <Label htmlFor="services-subtitle" className="text-slate-300">
                M√¥ t·∫£
              </Label>
              <Input
                id="services-subtitle"
                value={content.services.subtitle}
                onChange={(e) =>
                  setContent({ ...content, services: { ...content.services, subtitle: e.target.value } })
                }
                className="bg-slate-700 border-slate-600 text-white"
              />
            </div>
          </CardContent>
        </Card>

        {/* Contact Section */}
        <Card className="bg-slate-800 border-slate-700 lg:col-span-2">
          <CardHeader>
            <CardTitle className="text-white">Li√™n h·ªá</CardTitle>
            <CardDescription className="text-slate-400">Th√¥ng tin li√™n h·ªá v√† form li√™n h·ªá</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="contact-title" className="text-slate-300">
                  Ti√™u ƒë·ªÅ
                </Label>
                <Input
                  id="contact-title"
                  value={content.contact.title}
                  onChange={(e) => setContent({ ...content, contact: { ...content.contact, title: e.target.value } })}
                  className="bg-slate-700 border-slate-600 text-white"
                />
              </div>
              <div>
                <Label htmlFor="contact-subtitle" className="text-slate-300">
                  M√¥ t·∫£
                </Label>
                <Input
                  id="contact-subtitle"
                  value={content.contact.subtitle}
                  onChange={(e) =>
                    setContent({ ...content, contact: { ...content.contact, subtitle: e.target.value } })
                  }
                  className="bg-slate-700 border-slate-600 text-white"
                />
              </div>
            </div>
            <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
              <div>
                <Label htmlFor="contact-phone" className="text-slate-300">
                  S·ªë ƒëi·ªán tho·∫°i
                </Label>
                <Input
                  id="contact-phone"
                  value={content.contact.phone}
                  onChange={(e) => setContent({ ...content, contact: { ...content.contact, phone: e.target.value } })}
                  className="bg-slate-700 border-slate-600 text-white"
                />
              </div>
              <div>
                <Label htmlFor="contact-email" className="text-slate-300">
                  Email
                </Label>
                <Input
                  id="contact-email"
                  value={content.contact.email}
                  onChange={(e) => setContent({ ...content, contact: { ...content.contact, email: e.target.value } })}
                  className="bg-slate-700 border-slate-600 text-white"
                />
              </div>
              <div>
                <Label htmlFor="contact-address" className="text-slate-300">
                  ƒê·ªãa ch·ªâ
                </Label>
                <Input
                  id="contact-address"
                  value={content.contact.address}
                  onChange={(e) => setContent({ ...content, contact: { ...content.contact, address: e.target.value } })}
                  className="bg-slate-700 border-slate-600 text-white"
                />
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Pricing Section */}
        <Card className="bg-slate-800 border-slate-700">
          <CardHeader>
            <CardTitle className="text-white">B·∫£ng gi√°</CardTitle>
            <CardDescription className="text-slate-400">Th√¥ng tin v·ªÅ c√°c g√≥i d·ªãch v·ª•</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="pricing-title" className="text-slate-300">
                Ti√™u ƒë·ªÅ
              </Label>
              <Input
                id="pricing-title"
                value={content.pricing.title}
                onChange={(e) => setContent({ ...content, pricing: { ...content.pricing, title: e.target.value } })}
                className="bg-slate-700 border-slate-600 text-white"
              />
            </div>
            <div>
              <Label htmlFor="pricing-subtitle" className="text-slate-300">
                M√¥ t·∫£
              </Label>
              <Input
                id="pricing-subtitle"
                value={content.pricing.subtitle}
                onChange={(e) => setContent({ ...content, pricing: { ...content.pricing, subtitle: e.target.value } })}
                className="bg-slate-700 border-slate-600 text-white"
              />
            </div>
          </CardContent>
        </Card>

        {/* Testimonials Section */}
        <Card className="bg-slate-800 border-slate-700 lg:col-span-2">
          <CardHeader>
            <CardTitle className="text-white">Testimonials - Kh√°ch h√†ng n√≥i g√¨</CardTitle>
            <CardDescription className="text-slate-400">Qu·∫£n l√Ω ph·∫£n h·ªìi v√† ƒë√°nh gi√° t·ª´ kh√°ch h√†ng</CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="testimonials-title" className="text-slate-300">
                  Ti√™u ƒë·ªÅ
                </Label>
                <Input
                  id="testimonials-title"
                  value={content.testimonials.title}
                  onChange={(e) =>
                    setContent({ ...content, testimonials: { ...content.testimonials, title: e.target.value } })
                  }
                  className="bg-slate-700 border-slate-600 text-white"
                />
              </div>
              <div>
                <Label htmlFor="testimonials-subtitle" className="text-slate-300">
                  M√¥ t·∫£
                </Label>
                <Input
                  id="testimonials-subtitle"
                  value={content.testimonials.subtitle}
                  onChange={(e) =>
                    setContent({ ...content, testimonials: { ...content.testimonials, subtitle: e.target.value } })
                  }
                  className="bg-slate-700 border-slate-600 text-white"
                />
              </div>
            </div>

            <div className="space-y-4">
              <h3 className="text-lg font-semibold text-white">Testimonials</h3>
              {content.testimonials.items.map((item, index) => (
                <div key={index} className="p-4 bg-slate-700 rounded-lg space-y-4">
                  <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
                    <div>
                      <Label className="text-slate-300">T√™n kh√°ch h√†ng</Label>
                      <Input
                        value={item.name}
                        onChange={(e) => {
                          const newItems = [...content.testimonials.items]
                          newItems[index].name = e.target.value
                          setContent({ ...content, testimonials: { ...content.testimonials, items: newItems } })
                        }}
                        className="bg-slate-600 border-slate-500 text-white"
                      />
                    </div>
                    <div>
                      <Label className="text-slate-300">Ch·ª©c v·ª•</Label>
                      <Input
                        value={item.position}
                        onChange={(e) => {
                          const newItems = [...content.testimonials.items]
                          newItems[index].position = e.target.value
                          setContent({ ...content, testimonials: { ...content.testimonials, items: newItems } })
                        }}
                        className="bg-slate-600 border-slate-500 text-white"
                      />
                    </div>
                    <div>
                      <Label className="text-slate-300">C√¥ng ty</Label>
                      <Input
                        value={item.company}
                        onChange={(e) => {
                          const newItems = [...content.testimonials.items]
                          newItems[index].company = e.target.value
                          setContent({ ...content, testimonials: { ...content.testimonials, items: newItems } })
                        }}
                        className="bg-slate-600 border-slate-500 text-white"
                      />
                    </div>
                  </div>
                  <div>
                    <Label className="text-slate-300">N·ªôi dung ph·∫£n h·ªìi</Label>
                    <Textarea
                      value={item.content}
                      onChange={(e) => {
                        const newItems = [...content.testimonials.items]
                        newItems[index].content = e.target.value
                        setContent({ ...content, testimonials: { ...content.testimonials, items: newItems } })
                      }}
                      className="bg-slate-600 border-slate-500 text-white"
                      rows={3}
                    />
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* FAQ Section */}
        <Card className="bg-slate-800 border-slate-700 lg:col-span-2">
          <CardHeader>
            <CardTitle className="text-white">FAQ - C√¢u h·ªèi th∆∞·ªùng g·∫∑p</CardTitle>
            <CardDescription className="text-slate-400">Qu·∫£n l√Ω c√°c c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi ph·ªï bi·∫øn</CardDescription>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
              <div>
                <Label htmlFor="faq-title" className="text-slate-300">
                  Ti√™u ƒë·ªÅ
                </Label>
                <Input
                  id="faq-title"
                  value={content.faq.title}
                  onChange={(e) => setContent({ ...content, faq: { ...content.faq, title: e.target.value } })}
                  className="bg-slate-700 border-slate-600 text-white"
                />
              </div>
              <div>
                <Label htmlFor="faq-subtitle" className="text-slate-300">
                  M√¥ t·∫£
                </Label>
                <Input
                  id="faq-subtitle"
                  value={content.faq.subtitle}
                  onChange={(e) => setContent({ ...content, faq: { ...content.faq, subtitle: e.target.value } })}
                  className="bg-slate-700 border-slate-600 text-white"
                />
              </div>
            </div>

            <div className="space-y-4">
              <h3 className="text-lg font-semibold text-white">C√¢u h·ªèi & Tr·∫£ l·ªùi</h3>
              {content.faq.items.map((item, index) => (
                <div key={index} className="p-4 bg-slate-700 rounded-lg space-y-4">
                  <div>
                    <Label className="text-slate-300">C√¢u h·ªèi</Label>
                    <Input
                      value={item.question}
                      onChange={(e) => {
                        const newItems = [...content.faq.items]
                        newItems[index].question = e.target.value
                        setContent({ ...content, faq: { ...content.faq, items: newItems } })
                      }}
                      className="bg-slate-600 border-slate-500 text-white"
                    />
                  </div>
                  <div>
                    <Label className="text-slate-300">C√¢u tr·∫£ l·ªùi</Label>
                    <Textarea
                      value={item.answer}
                      onChange={(e) => {
                        const newItems = [...content.faq.items]
                        newItems[index].answer = e.target.value
                        setContent({ ...content, faq: { ...content.faq, items: newItems } })
                      }}
                      className="bg-slate-600 border-slate-500 text-white"
                      rows={3}
                    />
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Newsletter Section */}
        <Card id="newsletter" className="bg-slate-800 border-slate-700">
          <CardHeader>
            <CardTitle className="text-white">Newsletter - ƒêƒÉng k√Ω nh·∫≠n tin</CardTitle>
            <CardDescription className="text-slate-400">Qu·∫£n l√Ω ph·∫ßn ƒëƒÉng k√Ω nh·∫≠n tin t·ª©c</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <Label htmlFor="newsletter-title" className="text-slate-300">
                Ti√™u ƒë·ªÅ
              </Label>
              <Input
                id="newsletter-title"
                value={content.newsletter.title}
                onChange={(e) =>
                  setContent({ ...content, newsletter: { ...content.newsletter, title: e.target.value } })
                }
                className="bg-slate-700 border-slate-600 text-white"
              />
            </div>
            <div>
              <Label htmlFor="newsletter-subtitle" className="text-slate-300">
                M√¥ t·∫£
              </Label>
              <Input
                id="newsletter-subtitle"
                value={content.newsletter.subtitle}
                onChange={(e) =>
                  setContent({ ...content, newsletter: { ...content.newsletter, subtitle: e.target.value } })
                }
                className="bg-slate-700 border-slate-600 text-white"
              />
            </div>
            <div>
              <Label htmlFor="newsletter-placeholder" className="text-slate-300">
                Placeholder text
              </Label>
              <Input
                id="newsletter-placeholder"
                value={content.newsletter.placeholder}
                onChange={(e) =>
                  setContent({ ...content, newsletter: { ...content.newsletter, placeholder: e.target.value } })
                }
                className="bg-slate-700 border-slate-600 text-white"
              />
            </div>
            <div>
              <Label htmlFor="newsletter-button" className="text-slate-300">
                Text n√∫t ƒëƒÉng k√Ω
              </Label>
              <Input
                id="newsletter-button"
                value={content.newsletter.buttonText}
                onChange={(e) =>
                  setContent({ ...content, newsletter: { ...content.newsletter, buttonText: e.target.value } })
                }
                className="bg-slate-700 border-slate-600 text-white"
              />
            </div>
          </CardContent>
        </Card>





      </div>
    </div>
  )
}
