/**
 * Grid Layout Calculator for A4 Construction Report Pages
 * T√≠nh to√°n k√≠ch th∆∞·ªõc khung ·∫£nh d·ª±a tr√™n input ng∆∞·ªùi d√πng v√† constraints kh·ªï A4
 * 
 * VERSION 2.0: Enhanced with flexible aspect ratio support
 */

import { parseAspectRatio, getAspectRatioValue, validateAspectRatioForA4 } from './aspect-ratio-constants'

export interface GridCalculationInput {
  imagesPerPage: number    // S·ªë ·∫£nh mu·ªën ch√®n
  imagesPerRow: number     // S·ªë khung theo chi·ªÅu ngang
  // TH√äM: Margin parameters t√πy ch·ªânh
  marginLeft?: number      // mm - Margin tr√°i (m·∫∑c ƒë·ªãnh 10mm)
  marginRight?: number     // mm - Margin ph·∫£i (m·∫∑c ƒë·ªãnh 10mm)
  marginBottom?: number    // mm - Margin ƒë√°y (m·∫∑c ƒë·ªãnh 10mm)
  marginHeader?: number    // mm - Kho·∫£ng c√°ch t·ª´ ƒë·ªânh gi·∫•y ƒë·∫øn khung ·∫£nh (m·∫∑c ƒë·ªãnh 45mm)
  // TH√äM: T·ª∑ l·ªá ·∫£nh
  aspectRatio?: string     // T·ª∑ l·ªá ·∫£nh (m·∫∑c ƒë·ªãnh "4:3")
  // TH√äM: CƒÉn gi·ªØa theo chi·ªÅu ngang
  centerHorizontally?: boolean // CƒÉn gi·ªØa khung ·∫£nh theo chi·ªÅu ngang (m·∫∑c ƒë·ªãnh false)
}

export interface GridCalculationResult {
  // K√≠ch th∆∞·ªõc khung t√≠nh ƒë∆∞·ª£c
  cellWidth: number        // mm
  cellHeight: number       // mm
  
  // Th√¥ng tin layout
  rows: number            // S·ªë h√†ng th·ª±c t·∫ø
  cols: number            // S·ªë c·ªôt th·ª±c t·∫ø
  
  // Validation results
  isValid: boolean        // C√≥ th·ªÉ ch√®n ƒë∆∞·ª£c kh√¥ng
  warnings: string[]      // C√°c c·∫£nh b√°o
  errors: string[]        // C√°c l·ªói
  
  // Grid dimensions
  totalGridWidth: number  // mm - T·ªïng chi·ªÅu r·ªông grid
  totalGridHeight: number // mm - T·ªïng chi·ªÅu cao grid
  
  // TH√äM: Margin v√† available space info
  margins: {
    left: number
    right: number
    bottom: number
    header: number
  }
  availableArea: {
    width: number          // mm - Kh√¥ng gian kh·∫£ d·ª•ng cho grid
    height: number         // mm
  }
  
  // NEW: Aspect ratio information
  aspectRatio: {
    value: string          // Original aspect ratio string (e.g., "4:3")
    numericValue: number   // Calculated ratio (width/height)
    actualRatio: number    // Actual ratio of calculated cells
    isExact: boolean       // Whether calculated cells match desired ratio exactly
  }
}

// Constants - Kh·ªï A4 v√† constraints
const A4_CONSTANTS = {
  // A4 paper size
  PAPER_WIDTH: 210,       // mm
  PAPER_HEIGHT: 297,      // mm
  
  // Available area for images (TƒÇNG CHI·ªÄU CAO ƒê·ªÇ C√ì TH√äM KH√îNG GIAN)
  AVAILABLE_WIDTH: 180,   // mm (210 - 30 margin) - conservative
  AVAILABLE_HEIGHT: 220,  // mm (GI·∫¢M ƒê·ªÇ ƒê·∫¢M B·∫¢O KHUNG VU√îNG V·ª™A V·∫∂N)
  
  // Header area (1/5 of page height)
  HEADER_HEIGHT: 59,      // mm (297 * 1/5)
  
  // Grid constraints
  MAX_ROWS: 5,
  MAX_COLS: 4,
  MAX_IMAGES_PER_PAGE: 20,
  
  // Size constraints
  MIN_CELL_SIZE: 15,      // mm - Minimum readable size
  // REMOVED: MAX_CELL_SIZE - kh√¥ng c√≥ quy ƒë·ªãnh v·ªÅ k√≠ch th∆∞·ªõc t·ªëi ƒëa
  GAP_SIZE: 5,            // mm - Gap between cells
  
  // Margins
  MARGIN: 10              // mm
}

/**
 * T√≠nh to√°n layout grid d·ª±a tr√™n input ng∆∞·ªùi d√πng - ENHANCED WITH ASPECT RATIO SUPPORT
 */
export function calculateGridLayout(input: GridCalculationInput): GridCalculationResult {
  const { 
    imagesPerPage, 
    imagesPerRow,
    // TH√äM: Margin parameters v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh
    marginLeft = 10,
    marginRight = 10,
    marginBottom = 10,
    marginHeader = 45,
    // TH√äM: Aspect ratio v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh
    aspectRatio = "4:3",
    // TH√äM: Center horizontally v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh
    centerHorizontally = false
  } = input
  
  // Parse aspect ratio
  const { widthRatio, heightRatio } = parseAspectRatio(aspectRatio)
  const desiredAspectRatio = getAspectRatioValue(aspectRatio)
  
  console.log(`üéØ GRID CALCULATOR: centerHorizontally = ${centerHorizontally}`)
  
  // Initialize result v·ªõi margin info v√† aspect ratio info
  const result: GridCalculationResult = {
    cellWidth: 0,
    cellHeight: 0,
    rows: 0,
    cols: imagesPerRow,
    isValid: false,
    warnings: [],
    errors: [],
    totalGridWidth: 0,
    totalGridHeight: 0,
    // TH√äM: Margin v√† available area info
    margins: {
      left: marginLeft,
      right: marginRight,
      bottom: marginBottom,
      header: marginHeader
    },
    availableArea: {
      width: 0,
      height: 0
    },
    // NEW: Aspect ratio information
    aspectRatio: {
      value: aspectRatio,
      numericValue: desiredAspectRatio,
      actualRatio: 0,
      isExact: false
    }
  }
  
  // Validation 1: Basic input validation
  if (imagesPerPage <= 0 || imagesPerRow <= 0) {
    result.errors.push("S·ªë ·∫£nh v√† s·ªë khung/h√†ng ph·∫£i l·ªõn h∆°n 0")
    return result
  }
  
  // Validation 2: STRICT Maximum constraints - KH√îNG CHO PH√âP V∆Ø·ª¢T QU√Å
  if (imagesPerPage > A4_CONSTANTS.MAX_IMAGES_PER_PAGE) {
    result.errors.push(`‚ùå V∆Ø·ª¢T QU√Å GI·ªöI H·∫†N: T·ªëi ƒëa ${A4_CONSTANTS.MAX_IMAGES_PER_PAGE} ·∫£nh tr√™n 1 trang. B·∫°n ƒëang c·ªë th√™m ${imagesPerPage} ·∫£nh.`)
    return result
  }
  
  if (imagesPerRow > A4_CONSTANTS.MAX_COLS) {
    result.errors.push(`‚ùå V∆Ø·ª¢T QU√Å GI·ªöI H·∫†N: T·ªëi ƒëa ${A4_CONSTANTS.MAX_COLS} khung theo chi·ªÅu ngang. B·∫°n ƒëang c·ªë t·∫°o ${imagesPerRow} khung/h√†ng.`)
    return result
  }
  
  // Calculate rows
  const rows = Math.ceil(imagesPerPage / imagesPerRow)
  result.rows = rows
  
  // Validation 3: STRICT Maximum rows - KH√îNG CHO PH√âP V∆Ø·ª¢T QU√Å
  if (rows > A4_CONSTANTS.MAX_ROWS) {
    result.errors.push(`‚ùå V∆Ø·ª¢T QU√Å GI·ªöI H·∫†N: V·ªõi ${imagesPerRow} khung/h√†ng v√† ${imagesPerPage} ·∫£nh s·∫Ω t·∫°o ${rows} h√†ng. T·ªëi ƒëa ch·ªâ ƒë∆∞·ª£c ${A4_CONSTANTS.MAX_ROWS} h√†ng.`)
    return result
  }
  
  // T√çNH TO√ÅN AVAILABLE SPACE V·ªöI MARGIN T√ôY CH·ªàNH
  const availableWidth = A4_CONSTANTS.PAPER_WIDTH - marginLeft - marginRight
  const availableHeight = A4_CONSTANTS.PAPER_HEIGHT - marginHeader - marginBottom
  
  // C·∫≠p nh·∫≠t available area trong result
  result.availableArea.width = availableWidth
  result.availableArea.height = availableHeight
  
  // Calculate available space for cells (minus gaps)
  const totalGapWidth = (imagesPerRow - 1) * A4_CONSTANTS.GAP_SIZE
  const totalGapHeight = (rows - 1) * A4_CONSTANTS.GAP_SIZE
  
  const availableWidthForCells = availableWidth - totalGapWidth
  const availableHeightForCells = availableHeight - totalGapHeight
  
  // Add aspect ratio validation
  const aspectRatioValidation = validateAspectRatioForA4(aspectRatio, imagesPerRow, rows)
  result.warnings.push(...aspectRatioValidation.warnings)
  
  // THU·∫¨T TO√ÅN ƒê√öNG THEO Y√äU C·∫¶U C·ª¶A ANH:
  // 1. T√≠nh max cell size theo c·∫£ 2 chi·ªÅu
  // 2. So s√°nh kho·∫£ng d∆∞ c·ªßa c·∫£ 2 ph∆∞∆°ng ph√°p  
  // 3. Ch·ªçn ph∆∞∆°ng ph√°p c√≥ kho·∫£ng d∆∞ √≠t h∆°n (t·ªëi ∆∞u h∆°n)
  // 4. Gi·ªØ nguy√™n c·∫°nh ƒë∆∞·ª£c ch·ªçn
  
  // Method 1: Width-constrained (gi·ªØ nguy√™n chi·ªÅu ngang)
  const cellWidthByWidth = Math.floor(availableWidthForCells / imagesPerRow)
  const cellHeightByWidth = Math.floor(cellWidthByWidth / desiredAspectRatio)
  const totalGridWidthByWidth = (cellWidthByWidth * imagesPerRow) + totalGapWidth
  const totalGridHeightByWidth = (cellHeightByWidth * rows) + totalGapHeight
  const remainingWidthByWidth = availableWidth - totalGridWidthByWidth
  const remainingHeightByWidth = availableHeight - totalGridHeightByWidth
  
  // Method 2: Height-constrained (gi·ªØ nguy√™n chi·ªÅu d·ªçc)
  const cellHeightByHeight = Math.floor(availableHeightForCells / rows)
  const cellWidthByHeight = Math.floor(cellHeightByHeight * desiredAspectRatio)
  const totalGridWidthByHeight = (cellWidthByHeight * imagesPerRow) + totalGapWidth
  const totalGridHeightByHeight = (cellHeightByHeight * rows) + totalGapHeight
  const remainingWidthByHeight = availableWidth - totalGridWidthByHeight
  const remainingHeightByHeight = availableHeight - totalGridHeightByHeight
  
  console.log(`üîß THU·∫¨T TO√ÅN ƒê√öNG:`)
  console.log(`   Method 1 (Width-constrained): ${cellWidthByWidth}√ó${cellHeightByWidth}mm ‚Üí Remaining: ${remainingWidthByWidth}√ó${remainingHeightByWidth}mm`)
  console.log(`   Method 2 (Height-constrained): ${cellWidthByHeight}√ó${cellHeightByHeight}mm ‚Üí Remaining: ${remainingWidthByHeight}√ó${remainingHeightByHeight}mm`)
  
  // Ki·ªÉm tra method n√†o FIT trong kh·ªï gi·∫•y
  const method1Fits = (remainingWidthByWidth >= 0 && remainingHeightByWidth >= 0)
  const method2Fits = (remainingWidthByHeight >= 0 && remainingHeightByHeight >= 0)
  
  let finalCellWidth: number
  let finalCellHeight: number
  let chosenMethod: string
  
  console.log(`   Method 1 fits: ${method1Fits}, Method 2 fits: ${method2Fits}`)
  
  if (method1Fits && method2Fits) {
    // C·∫£ 2 ƒë·ªÅu fit ‚Üí ch·ªçn method c√≥ kho·∫£ng d∆∞ √≠t h∆°n (t·ªëi ∆∞u h∆°n)
    const totalRemainingByWidth = remainingWidthByWidth + remainingHeightByWidth
    const totalRemainingByHeight = remainingWidthByHeight + remainingHeightByHeight
    
    if (totalRemainingByWidth <= totalRemainingByHeight) {
      finalCellWidth = cellWidthByWidth
      finalCellHeight = cellHeightByWidth
      chosenMethod = "Width-constrained (c·∫£ 2 fit, kho·∫£ng d∆∞ √≠t h∆°n)"
    } else {
      finalCellWidth = cellWidthByHeight
      finalCellHeight = cellHeightByHeight
      chosenMethod = "Height-constrained (c·∫£ 2 fit, kho·∫£ng d∆∞ √≠t h∆°n)"
    }
  } else if (method1Fits) {
    // Ch·ªâ method 1 fit
    finalCellWidth = cellWidthByWidth
    finalCellHeight = cellHeightByWidth
    chosenMethod = "Width-constrained (ch·ªâ method n√†y fit)"
  } else if (method2Fits) {
    // Ch·ªâ method 2 fit
    finalCellWidth = cellWidthByHeight
    finalCellHeight = cellHeightByHeight
    chosenMethod = "Height-constrained (ch·ªâ method n√†y fit)"
  } else {
    // Kh√¥ng method n√†o fit ‚Üí ch·ªçn method √≠t overflow h∆°n
    const overflowByWidth = Math.abs(Math.min(0, remainingWidthByWidth)) + Math.abs(Math.min(0, remainingHeightByWidth))
    const overflowByHeight = Math.abs(Math.min(0, remainingWidthByHeight)) + Math.abs(Math.min(0, remainingHeightByHeight))
    
    if (overflowByWidth <= overflowByHeight) {
      finalCellWidth = cellWidthByWidth
      finalCellHeight = cellHeightByWidth
      chosenMethod = "Width-constrained (kh√¥ng fit, √≠t overflow h∆°n)"
    } else {
      finalCellWidth = cellWidthByHeight
      finalCellHeight = cellHeightByHeight
      chosenMethod = "Height-constrained (kh√¥ng fit, √≠t overflow h∆°n)"
    }
  }
  
  console.log(`   ‚Üí Chosen: ${chosenMethod}`)
  console.log(`   ‚Üí Final cell size: ${finalCellWidth}√ó${finalCellHeight}mm`)

  // Apply minimum size constraints
  const minSize = A4_CONSTANTS.MIN_CELL_SIZE
  if (finalCellWidth < minSize || finalCellHeight < minSize) {
    result.warnings.push(`‚ö†Ô∏è Khung ·∫£nh r·∫•t nh·ªè (${finalCellWidth}x${finalCellHeight}mm). Khuy·∫øn ngh·ªã gi·∫£m s·ªë khung/h√†ng ho·∫∑c s·ªë ·∫£nh.`)
  }

  // REMOVED: MAX_CELL_SIZE constraint - kh√¥ng c√≥ quy ƒë·ªãnh v·ªÅ k√≠ch th∆∞·ªõc t·ªëi ƒëa
  // Ch·ªâ ki·ªÉm tra overflow theo chi·ªÅu d·ªçc v√† th√¥ng b√°o
  
  // ƒê√£ x·ª≠ l√Ω warnings ·ªü tr√™n - x√≥a duplicate code
  
  // Calculate total grid dimensions
  const totalGridWidth = (finalCellWidth * imagesPerRow) + totalGapWidth
  const totalGridHeight = (finalCellHeight * rows) + totalGapHeight
  
  // B∆∞·ªõc 4: Ki·ªÉm tra overflow theo chi·ªÅu d·ªçc v√† t√≠nh s·ªë ·∫£nh b·ªã tr√†n
  const totalRequiredHeight = totalGridHeight + marginHeader + marginBottom
  if (totalRequiredHeight > A4_CONSTANTS.PAPER_HEIGHT) {
    const overflowHeight = totalRequiredHeight - A4_CONSTANTS.PAPER_HEIGHT
    const availableHeightForGrid = A4_CONSTANTS.PAPER_HEIGHT - marginHeader - marginBottom
    const maxRowsThatFit = Math.floor((availableHeightForGrid + A4_CONSTANTS.GAP_SIZE) / (finalCellHeight + A4_CONSTANTS.GAP_SIZE))
    const maxImagesThatFit = maxRowsThatFit * imagesPerRow
    const overflowImages = imagesPerPage - maxImagesThatFit
    
    result.warnings.push(`‚ö†Ô∏è OVERFLOW THEO CHI·ªÄU D·ªåC:`)
    result.warnings.push(`   - T·ªïng chi·ªÅu cao c·∫ßn: ${totalRequiredHeight}mm > Kh·ªï gi·∫•y: ${A4_CONSTANTS.PAPER_HEIGHT}mm`)
    result.warnings.push(`   - V∆∞·ª£t qu√°: ${overflowHeight}mm`)
    result.warnings.push(`   - S·ªë h√†ng hi·ªán t·∫°i: ${rows} h√†ng`)
    result.warnings.push(`   - S·ªë h√†ng t·ªëi ƒëa v·ª´a: ${maxRowsThatFit} h√†ng`)
    result.warnings.push(`   - S·ªë ·∫£nh hi·ªán t·∫°i: ${imagesPerPage} ·∫£nh`)
    result.warnings.push(`   - S·ªë ·∫£nh t·ªëi ƒëa v·ª´a: ${maxImagesThatFit} ·∫£nh`)
    result.warnings.push(`   ‚Üí ${overflowImages} ·∫£nh b·ªã tr√†n v√† c·∫ßn thay ƒë·ªïi l·∫°i!`)
  }
  
  // Th√¥ng tin v·ªÅ chi·ªÅu ngang (kh√¥ng block, ch·ªâ th√¥ng b√°o)
  const totalRequiredWidth = totalGridWidth + marginLeft + marginRight
  if (totalRequiredWidth > A4_CONSTANTS.PAPER_WIDTH) {
    result.warnings.push(`‚ö†Ô∏è T·ªïng chi·ªÅu r·ªông v∆∞·ª£t qu√° kh·ªï gi·∫•y: ${totalRequiredWidth}mm > ${A4_CONSTANTS.PAPER_WIDTH}mm`)
    result.warnings.push(`   - Chi·ªÅu r·ªông grid: ${totalGridWidth}mm`)
    result.warnings.push(`   - Margin left: ${marginLeft}mm`)
    result.warnings.push(`   - Margin right: ${marginRight}mm`)
  }
  
  // Calculate actual aspect ratio and check accuracy
  const actualAspectRatio = finalCellWidth / finalCellHeight
  const aspectRatioDifference = Math.abs(actualAspectRatio - desiredAspectRatio)
  const isExactRatio = aspectRatioDifference < 0.05 // 5% tolerance
  
  // Success - populate result
  result.cellWidth = finalCellWidth
  result.cellHeight = finalCellHeight
  result.totalGridWidth = totalGridWidth
  result.totalGridHeight = totalGridHeight
  result.isValid = true
  
  // Update aspect ratio information
  result.aspectRatio.actualRatio = actualAspectRatio
  result.aspectRatio.isExact = isExactRatio
  
  // Debug console with aspect ratio info
  console.log(`üßÆ Grid calculation: ${imagesPerPage} ·∫£nh, ${imagesPerRow} c·ªôt ‚Üí ${rows} h√†ng ‚Üí ${finalCellWidth}√ó${finalCellHeight}mm ‚Üí Total: ${totalGridWidth}√ó${totalGridHeight}mm`)
  console.log(`üìê Aspect ratio: Desired ${aspectRatio} (${desiredAspectRatio.toFixed(3)}) ‚Üí Actual ${actualAspectRatio.toFixed(3)} ‚Üí ${isExactRatio ? '‚úÖ Exact' : '‚ö†Ô∏è Approximate'}`)
  console.log(`üìè Input margins: L=${marginLeft}, R=${marginRight}, B=${marginBottom}, H=${marginHeader}`)
  console.log(`üìè Available space: ${availableWidth}√ó${availableHeight}mm ‚Üí Cells: ${availableWidthForCells}√ó${availableHeightForCells}mm`)
  
  // Add informational warnings
  if (finalCellWidth < 30 || finalCellHeight < 30) {
    result.warnings.push("Khung ·∫£nh kh√° nh·ªè, c√≥ th·ªÉ kh√≥ nh√¨n khi in.")
  }
  
  if (!isExactRatio) {
    result.warnings.push(`T·ª∑ l·ªá th·ª±c t·∫ø ${actualAspectRatio.toFixed(2)}:1 kh√°c v·ªõi t·ª∑ l·ªá mong mu·ªën ${aspectRatio}`)
  }
  
  if (rows === 1 && imagesPerPage < imagesPerRow) {
    result.warnings.push(`Ch·ªâ s·ª≠ d·ª•ng ${imagesPerPage}/${imagesPerRow} khung trong h√†ng. C√≥ th·ªÉ t·ªëi ∆∞u layout.`)
  }
  
  // TH√äM: Logic cƒÉn gi·ªØa theo chi·ªÅu ngang
  if (centerHorizontally) {
    const actualGridWidth = totalGridWidth
    const totalAvailableWidth = A4_CONSTANTS.PAPER_WIDTH
    const usedWidth = actualGridWidth + marginLeft + marginRight
    const remainingWidth = totalAvailableWidth - usedWidth
    
    if (remainingWidth > 0) {
      // T√≠nh margin left v√† right m·ªõi ƒë·ªÉ cƒÉn gi·ªØa
      const newMarginLeft = marginLeft + (remainingWidth / 2)
      const newMarginRight = marginRight + (remainingWidth / 2)
      
      // C·∫≠p nh·∫≠t margins trong result
      result.margins.left = Math.floor(newMarginLeft)
      result.margins.right = Math.floor(newMarginRight)
      
      console.log(`üéØ CENTER HORIZONTALLY:`)
      console.log(`   - Grid width: ${actualGridWidth}mm`)
      console.log(`   - Total paper width: ${totalAvailableWidth}mm`)
      console.log(`   - Used width: ${usedWidth}mm`)
      console.log(`   - Remaining width: ${remainingWidth}mm`)
      console.log(`   - Original margins: L=${marginLeft}mm, R=${marginRight}mm`)
      console.log(`   - New margins: L=${result.margins.left}mm, R=${result.margins.right}mm`)
      
      result.warnings.push(`üéØ CƒÉn gi·ªØa: Margin tr√°i/ph·∫£i ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh th√†nh ${result.margins.left}mm/${result.margins.right}mm`)
    } else {
      console.log(`üéØ CENTER HORIZONTALLY: Kh√¥ng th·ªÉ cƒÉn gi·ªØa - grid ƒë√£ chi·∫øm h·∫øt kh√¥ng gian`)
      result.warnings.push(`‚ö†Ô∏è Kh√¥ng th·ªÉ cƒÉn gi·ªØa - khung ·∫£nh ƒë√£ chi·∫øm h·∫øt kh√¥ng gian theo chi·ªÅu ngang`)
    }
  }
  
  return result
}

/**
 * ƒê·ªÅ xu·∫•t layout t·ªëi ∆∞u cho s·ªë ·∫£nh cho tr∆∞·ªõc v·ªõi aspect ratio
 */
export function suggestOptimalLayout(
  imagesPerPage: number, 
  aspectRatio: string = "4:3"
): GridCalculationInput[] {
  const suggestions: GridCalculationInput[] = []
  
  // Try different combinations
  for (let imagesPerRow = 1; imagesPerRow <= A4_CONSTANTS.MAX_COLS; imagesPerRow++) {
    const input: GridCalculationInput = { imagesPerPage, imagesPerRow, aspectRatio }
    const result = calculateGridLayout(input)
    
    if (result.isValid && result.errors.length === 0) {
      suggestions.push(input)
    }
  }
  
  // Sort by multiple criteria: aspect ratio accuracy, then cell size
  return suggestions.sort((a, b) => {
    const resultA = calculateGridLayout(a)
    const resultB = calculateGridLayout(b)
    
    // Priority 1: Exact aspect ratio match
    if (resultA.aspectRatio.isExact && !resultB.aspectRatio.isExact) return -1
    if (!resultA.aspectRatio.isExact && resultB.aspectRatio.isExact) return 1
    
    // Priority 2: Cell area (larger is better)
    const areaA = resultA.cellWidth * resultA.cellHeight
    const areaB = resultB.cellWidth * resultB.cellHeight
    return areaB - areaA
  })
}

/**
 * Get optimal aspect ratio suggestions for given layout constraints
 */
export function suggestAspectRatiosForLayout(
  imagesPerPage: number,
  imagesPerRow: number
): { aspectRatio: string; result: GridCalculationResult }[] {
  const suggestions: { aspectRatio: string; result: GridCalculationResult }[] = []
  
  // Test common aspect ratios
  const testRatios = ["1:1", "4:3", "3:2", "16:9", "3:4", "2:3"]
  
  for (const ratio of testRatios) {
    const input: GridCalculationInput = { imagesPerPage, imagesPerRow, aspectRatio: ratio }
    const result = calculateGridLayout(input)
    
    if (result.isValid && result.errors.length === 0) {
      suggestions.push({ aspectRatio: ratio, result })
    }
  }
  
  // Sort by cell area (larger is better)
  return suggestions.sort((a, b) => {
    const areaA = a.result.cellWidth * a.result.cellHeight
    const areaB = b.result.cellWidth * b.result.cellHeight
    return areaB - areaA
  })
}